---
title:  "理解基本的HTML Forms"
categories: [Ruby/Rails ℗]
tags: [Ruby & Rails, HTML]
---


一个web app中，表单是用户与app交换信息最重要的部分之一，rails有自己的form helper ，此外还有很多gem帮助我们简化、实现表单，比如[simple_form](https://github.com/plataformatec/simple_form)。<br>



### 1 HTML Forms

---

总体来看html表单会有 form 相关的标签**(element)** 和每个标签对应的诸多属性**(attributes)** 构成。

a. 一个完整的 HTML 表单会由第一级的 `<form>` 标签和它的各种 attributes 包裹;<br>

b. 在<form>基础上，第二级的 `<input>`, `<select>` 这些标签和它们的各种 attributes 搭建表单的主体；<br>


*在构成表单的所有标签中 `<input>`是最重要的一个，使用这个标签配合  `type` 属性的设置，可以实现多种类型的数据输入。* 以下是html form 相关的element:

<table class="w3-table-all notranslate" style="position: center">
<tbody><tr>
<th>Tag</th>
<th>Description</th>
</tr>
<tr>
<td><a href="/tags/tag_form.asp">&lt;form&gt;</a></td>
<td> Defines an HTML form for user input</td>
</tr>
<tr>
<td><a href="/tags/tag_input.asp">&lt;input&gt;</a></td>
<td>Defines an input control</td>
</tr>
<tr>
<td><a href="/tags/tag_textarea.asp">&lt;textarea&gt;</a></td>
<td>Defines a multiline input control (text area)</td>
</tr>
<tr>
<td><a href="/tags/tag_label.asp">&lt;label&gt;</a></td>
<td>Defines a label for an &lt;input&gt; element</td>
</tr>
<tr>
<td><a href="/tags/tag_fieldset.asp">&lt;fieldset&gt;</a></td>
<td>Groups related elements in a form</td>
</tr>
<tr>
<td><a href="/tags/tag_legend.asp">&lt;legend&gt;</a></td>
<td>Defines a caption for a &lt;fieldset&gt; element</td>
</tr>
<tr>
<td><a href="/tags/tag_select.asp">&lt;select&gt;</a></td>
<td>Defines a drop-down list</td>
</tr>
<tr>
<td><a href="/tags/tag_optgroup.asp">&lt;optgroup&gt;</a></td>
<td>Defines a group of related options in a drop-down list</td>
</tr>
<tr>
<td><a href="/tags/tag_option.asp">&lt;option&gt;</a></td>
<td>Defines an option in a drop-down list</td>
</tr>
<tr>
<td><a href="/tags/tag_button.asp">&lt;button&gt;</a></td>
<td>Defines a clickable button</td>
</tr>
<tr>
<td class="html5badge"><a href="/tags/tag_datalist.asp">&lt;datalist&gt;</a></td>
<td>Specifies a list of pre-defined options for input controls</td>
</tr>
<tr>
<td class="html5badge"><a href="/tags/tag_keygen.asp">&lt;keygen&gt;</a></td>
<td>Defines a key-pair generator field (for forms)</td>
</tr>
<tr>
<td class="html5badge"><a href="/tags/tag_output.asp">&lt;output&gt;</a></td>
<td>Defines the result of a calculation</td>
</tr>
</tbody></table>

[表格引自w3school.com](https://www.w3schools.com/html/html_form_elements.asp):

> The most important form element is the `<input>` element.s
> The `<input>` element can be displayed in several ways, depending on the type attribute.

甚至在我写上面这一段时没有使用markdown 包裹code的符号将 `<input>` 包起来，页面上直接出现了<input>一个这样的输入框。

<br>

**来看一个最简单的html form：**
```ruby
<form>
  First name:
    <input type="text" name="nick_name" value="Your Name">
    <input type="submit" value="提交表单">
</form>
```
<br>

<form>
  First name:
    <input type="text" name="nick_name" value="Your Name"><br>
    <input type="submit" value="提交表单">
</form>

<br>
- 当直接点击 "提交表单" 后，网页刷新了下但未跳转，网址后面多了 `?nick_name=Your+Name`
- 当删掉输入框中的文字后再输入 Caven, 点击 "提交表单"，网址后面变成了 `?nick_name=Caven`
- 两种情况下，页面刷新后输入框里的内容都会再次回到原来的 Your Name

网址中的问号 `?` 代表这是一次query( [The query string is everything after "?" in the URL. ](http://edgeguides.rubyonrails.org/action_controller_overview.html#parameters) )。这里用户以hash的形式送出了一组数据，发出了一次 **get** 的request。

对于输入数据行，value在这里并不是必须的，它只是设定了一个送出数据的默认值，所以如果是用户自己需要输入的内容，我们其实可以不写value。但如果是`name="_method" value="patch"` 这类表达request类型的 value 则是很重要的内容。

#### 试试直接将这段 html form 搬到rails app中：

新建一个简单的rails app，然后`rails g scaffold user name:string country:string age:integer specialty:string`

现在我们把上面那段html表单代码原封不动复制到 app/views/users/index.html.erb 页面:

然后点击 "提交表单", 出现的网址是 "http://localhost:3000/?nick_name=Your+Name" ，其他状况也与前面一样。查看下本地server返回的信息

```ruby

Started GET "/?nick_name=Your+Name" for 127.0.0.1 at 2017-06-14 22:59:25 +0800
Processing by UsersController#index as HTML
  Parameters: {"nick_name"=>"Your Name"}
  Rendering users/index.html.erb within layouts/application
  User Load (0.2ms)  SELECT "users".* FROM "users"
  Rendered users/index.html.erb within layouts/application (2.8ms)
Completed 200 OK in 20ms (Views: 18.1ms | ActiveRecord: 0.2ms)
```

**第一行，告诉我们送出表单使用的是 GET 动作；**

**第三行，可以看到我们以hash的形式送出了数据, key 就是我们在 name="" 后写的内容， value 就是我们在输入框里输入的内容。**

### 2 Rails form helpers - form_tag

还是使用之前的html form代码，我们引入rails form helper中的 `form_tag` 试试，它与`form_for`的主要区别是它可以不关联任何对象或资料表,而`form_for`需要制定送出资料的对象。 使用`form_tag`或`form_for` rails 都会自动帮我们生成 `<form> </form>` 标签，所以下面会省去这个标签

```ruby
<%= form_tag do %>
    First name:
    <input type="text" name="nick_name" value="Your Name"><br>
    <input type="submit" value="提交表单">
<% end %>
```

用chrome 检查生成的html代码会多出这几行：

```ruby

<form action="/" accept-charset="UTF-8" method="post">
    <input name="utf8" type="hidden" value="✓">
    <input type="hidden" name="authenticity_token"
           value="F2q5XFxlmIl1fXSbGOfVl+phm5YH/Uzhb/F4RKS1zDzBBlKSqJQFB2UAlt33l7+r0y8koWH73MhK2C1Olk90nA==">
    First name:
    <input type="text" name="nick_name" value="Your Name"><br>
    <input type="submit" value="提交表单">
</form>

```

可以看到Rails帮我们"额外"增加了许多代码：

#### 1 在form标签行

##### a.多了 `action="/"`

[action](https://www.w3schools.com/tags/att_form_action.asp)是 form 的一个attribute，它用来指定整个表单中，用户发出的 request 送往的地址或路径。

> The form_tag helper accepts 2 arguments: the path for the action and an options hash. This hash specifies the method of form submission and HTML options such as the form element's class.<br>
>-- sRails Guides


**action的用法 `action = "URL"`**
> URL : Where to send the form-data when the form is submitted.
>
> Possible values :
- An absolute URL - points to another web site (like action="http://www.example.com/example.html")
- A relative URL - points to a file within a web site (like action="example.html")

##### b.多了 method = "post"

[method](https://www.w3schools.com/tags/att_form_method.asp)同样是form 标签的一个 attribute 用来指定请求的动作类型，rails这里默认的是 post (html默认的是get)

另外在form标签行，多了 accept-charset="UTF-8"。[accept-charset](https://www.w3schools.com/tags/att_form_accept_charset.asp)同样是 form 标签的一个 attribute 用来指定表单接受的字符集。

如果这里我们点击提交，网页会跳转到 "http://localhost:3000/"，然后抛出错误 **"Routing Error
No route matches [POST] "/""**, 查看页面下方的 Parameters:

>{<br>
  "utf8" => "✓", "authenticity_token"=>"Oie2B6ReHG2oswb/Sg+cFpwuYy5k16BZoNPvBoCmOgXsS13JUK+B47jO5Lmlf/YqpWDcGQLRMHCF+roMslyCpQ==", "nick_name"=>"Your Name"<br>
}

<br>
#### 2 自动生成了4行input代码

##### 前两行`<input>`

`<input name="utf8" type="hidden" value="✓">`<br>
`<input type="hidden" name="authenticity_token" value="F2q5XFxlmIl1fXSbGOfVl+phm5YH/Uzhb/F4RKS1zDzBBlKSqJQFB2UAlt33l7+r0y8koWH73MhK2C1Olk90nA==">`

由于 type = "hidden" 所以在页面上并不可见，是一些默认的安全参数。

##### 后两行`<input>`


`First name:`<br>
`<input type="text" name="nick_name" value="Your Name">`<br>
`<input type="submit" value="提交表单">`

这两行是没有变化的。<br>
上面的例子中，`form_tag` 帮我们做的是：

- 给form行加上了 method = "post"
- 给form行加上了 action = "/" 指定了送出request的目的地
- 新增了2行input包裹了一些其他设置


到这里我们基本可以知道一个form发出request的几个重要的attributes：

- 1 form 标签行的 method="" 和 action="", 他们分别决定送出request的 动作类型 与 送出地址；
- 2 input 标签航的 type="", name="" 和 value="", 他们分别决定了送出输出数据的类型，以及送出数据内容（name对应key,value对应value）

记住这几个重要的属性，接下来看看完全使用 rails form helper `form_for` 并涉及到model资料的情形。


### 3 Rails form helpers - form_for

在 app/views/users/edit.html.erb 中写：

```ruby

<%= form_for @user do |user| %>
  <%= user.text_field :nick_name %>
  <%= user.submit_tag "确认提交"%>
<% end %>
```

到浏览器端查看生成的代码：

```ruby

<form class="edit_user" id="edit_user_2" action="/users/2" accept-charset="UTF-8" method="post">

    <input name="utf8" type="hidden" value="✓">
    <input type="hidden" name="_method" value="patch">
    <input type="hidden" name="authenticity_token"  
           value="bQG9quFxo/7sWtWu36z9qFGcUlFhTTZ3Wn7FYl4c4tXyqjtTTCipVxAKrU5DM0kyRvZHUKdAME6uRFRTY6HH+Q==">
    <input type="text" name="user[nick_name]" id="user_nick_name">
    <input type="submit" name="commit" value="确认提交" data-disable-with="确认提交">

</form>

```

在这个表单中我们是在新建(修改)user实例，生成的html代码中比起之前比起无对象的form_tag：

- form 标签行多了 class="", id="", method 仍然是 post
- form 标签行的 action的值从 "/" 变成了 "/users/2"
- input 新增了一行 `<input type="hidden" name="_method" value="patch">` 这样请求送出后，rails server 知道这是一个patch类型的请求
- input 第4行中的 name 从之前单纯的 "nick_name" 变成了 "user[nick_name]"(实际代表的是user实例的nick_name这个attribute)
- input 第3行中新增了id=""。

这里的class 和 id 都是 Rails 自动生成的：

>Rails will also automatically set the class and id of the form appropriately: a form creating an article would have id and class new_article. If you were editing the article with id 23, the class would be set to edit_article and the id to edit_article_23.



### 4 simple_form

仍然是在上面的 app/views/users/edit.html.erb 中

如果装了 [simple_form](https://github.com/plataformatec/simple_form)

我们只需要这样写就可以实现同样的表单：

```ruby
<%= simple_form_for @user do |user| %>
    <%= user.input :nick_name %>
    <%= user.submit "确认提交"%>
<% end %>
```

看看生成的html代码：

```ruby

<form novalidate="novalidate" class="simple_form edit_user" id="edit_user_2" action="/users/2" accept-charset="UTF-8" method="post">

    <input name="utf8" type="hidden" value="✓"><input type="hidden" name="_method" value="patch">
    <input type="hidden" name="authenticity_token"
           value="zxUru+4gCn2A2OocF7yQU69H+YKVPQUvYs3X/uXFdJcZecB1GtGX85ClCFr4zPpvlglGtfM7lQZH5IL01z/MNw==">
    <div class="input string optional user_nick_name">
          <label class="string optional" for="user_nick_name">Nick name</label>
          <input class="string optional" type="text" name="user[nick_name]" id="user_nick_name">
    </div>
    <input type="submit" name="commit" value="确认提交" data-disable-with="确认提交">

</form>

```

表面上看起来好像simple_form只是新增了一些class 多了 for 标签，没有太重大的变化。但实际上不管我们要传的数据类型是什么，都只用写 user.input， 不管我们要传的是日期，数字还是字串，simple_form 都会跑到users的资料表中去拿到对应的style,然后自动生成 type="" 这个html属性值。举例来说比如user有一个attribute是birthday，style是date:

- a.如果使用rails form helper 的写法，就要写 `<%= user.date_field :birthday %>` 继续使用text_field的写法就不行

- b.而使用simple_form 则仍然可以写 `<%= user.input :birthday %>`

关于[不同数据类型对应的 rails form helper 写法可以看这里。](http://guides.rubyonrails.org/form_helpers.html#other-helpers-of-interest)


<%= text_area_tag(:message, "Hi, nice site", size: "24x6") %><br>
<%= password_field_tag(:password) %><br>
<%= hidden_field_tag(:parent_id, "5") %><br>
<%= search_field(:user, :name) %><br>
<%= telephone_field(:user, :phone) %><br>
<%= date_field(:user, :born_on) %><br>
<%= datetime_local_field(:user, :graduation_day) %><br>
<%= month_field(:user, :birthday_month) %><br>
<%= week_field(:user, :birthday_week) %><br>
<%= url_field(:user, :homepage) %><br>
<%= email_field(:user, :address) %><br>
<%= color_field(:user, :favorite_color) %><br>
<%= time_field(:task, :started_at) %><br>
<%= number_field(:product, :price, in: 1.0..20.0, step: 0.5) %><br>
<%= range_field(:product, :discount, in: 1..100) %><br>

simple_form 帮我们简化了这部分内容，使得在rails中写表单变得更加简单。
<br>
<br>


#### HTML Forms vs Rails Form Helpers vs simple_form vs bootstrap

自下而上地看，[HTML forms](https://www.w3schools.com/html/html_forms.asp) 是这几个角色中相对恒定的一个。

- 不管是[rails form helper](http://guides.rubyonrails.org/form_helpers.html#how-do-forms-with-patch-put-or-delete-methods-work-questionmark)中的 `form_tag`, `form_for`, `text_field`, `check_box_tag`, `labal_tag`, `radio_button_tag`....
- 还是 simple_form 中的 `f.label`, `f.input`, `f.submit`, `f.association`...

都是在以某种逻辑简化表单，帮助我们自动生成基础的 HTML 代码。


注：bootstrap 中提供的 `class="btn-primary"`, `class="form-control"` 等各种样式只是在处理presentation层面的工作，没有涉及到数据层面，而rails的form helper 和 simple_form 则覆盖到了这部分内容。

**总的来说:**

1 HTML 是表单页中最底层的代码，不管使用了什么工具来生成表单，html会是最终落地的那一个；<br>
2 Rails 需要送出数据及请求，而 rails form helper 则是在简化写html表单代码的工作；<br>
3 simple_form 则是对rails form helper 的进一步简化，它甚至会到资料表里去拿资料的type,识别之后自动生成对应的 html input element中的 type;<br>
4 bootstrap 提供的是外观层面的样式，包好了很多 css ，所以它可以被rails 直接拿来用，也可以被 simple_form 直接拿来用。

这些工具在帮助我们简化代码的同时，也遮蔽了很多表单背后的东西，如果这些工具的用法发生变化，我们就要去追赶新的用法，或者新的gem。因此我们应该找出表单中比较稳定且更基础的东西，那就是 [HTML](https://www.w3schools.com/html/html_intro.asp)。以此为出发点来更好地理解这些表单工具在做什么。
